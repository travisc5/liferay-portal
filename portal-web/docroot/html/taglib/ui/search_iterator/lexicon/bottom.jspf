<%--
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

		<c:if test="<%= paginate %>">
			<div class="taglib-search-iterator-page-iterator-bottom">
				<liferay-ui:search-paginator
					id='<%= id + "PageIteratorBottom" %>'
					markupView="<%= markupView %>"
					searchContainer="<%= searchContainer %>"
					type="<%= type %>"
				/>
			</div>
		</c:if>
	</div>
</div>

<c:if test="<%= Validator.isNotNull(id) %>">
	<input id="<%= namespace + id %>PrimaryKeys" name="<%= namespace + id %>PrimaryKeys" type="hidden" value="" />

	<%
	String modules = "liferay-search-container";
	String rowCheckerRowSelector = StringPool.BLANK;

	if (rowMover != null) {
		modules += ",liferay-search-container-move";
	}

	if (rowChecker != null) {
		modules += ",liferay-search-container-select";

		rowCheckerRowSelector = rowChecker.getRowSelector();

		if (Validator.isNull(rowCheckerRowSelector)) {
			rowCheckerRowSelector = "[data-selectable=\"true\"]";
		}
	}
	%>

	<aui:script use="<%= modules %>">
		var plugins = [];

		var rowSelector = '<%= rowHtmlTag %><%= rowCheckerRowSelector %>';

		<c:if test="<%= rowChecker != null %>">
			var rememberCheckBoxState = <%= rowChecker.isRememberCheckBoxState() %>;

			<c:if test="<%= rowChecker.isRememberCheckBoxState() && Validator.isNotNull(rowChecker.getRememberCheckBoxStateURLRegex()) %>">
				rememberCheckBoxState = '<%= rowChecker.getRememberCheckBoxStateURLRegex() %>';
			</c:if>

			plugins.push(
				{
					cfg: {
						keepSelection: rememberCheckBoxState,
						rowSelector: rowSelector
					},
					fn: A.Plugin.SearchContainerSelect
				}
			);
		</c:if>

		<c:if test="<%= rowMover != null %>">
			var rowMoverConfig = <%= rowMover.toJSON().toString() %>;

			rowMoverConfig.rowSelector = rowSelector + rowMoverConfig.rowSelector;

			plugins.push(
				{
					cfg: rowMoverConfig,
					fn: A.Plugin.SearchContainerMove
				}
			);
		</c:if>

		var searchContainer = new Liferay.SearchContainer(
			{
				id: '<%= namespace + id %>',
				plugins: plugins
			}
		).render();

		<c:if test="<%= fixedHeader && displayStyle.equals(SearchIteratorTag.DEFAULT_DISPLAY_STYLE) %>">
			var contentBox = searchContainer.get('contentBox');

			if (contentBox) {
				var fixedHeader = document.getElementById('<%= namespace + id %>fixedHeader');
				var fixedTableData = document.querySelectorAll('.lfr-search-iterator-fixed-table-data');
				var mainContent = contentBox.ancestor('#main-content');
				var tableResponsive = contentBox.one('.table-responsive');

				var selectorAndEventListenerTupleArray = [];

				if (mainContent) {
					var scrollingContainer = window === Liferay.Util.getOpener() ? window : mainContent._node;

					var table = fixedHeader.parentElement.parentElement;
					var trDomRect = fixedHeader.previousElementSibling.getBoundingClientRect();

					selectorAndEventListenerTupleArray.push(
						[
							scrollingContainer,
							function(event) {
								var scrollTop = scrollingContainer.scrollTop;

								var trDomRecTop = trDomRect.top;

								fixedHeader.style.transform = 'translateY(' + Math.ceil(scrollTop - table.offsetTop - trDomRect.height) + 'px)';

								if (fixedHeader.classList.contains('hide') && (scrollTop >= trDomRecTop)) {
									fixedHeader.classList.remove('hide');
								}
								else if (scrollingContainer.scrollTop < trDomRecTop) {
									fixedHeader.classList.add('hide');
								}
							}
						]
					);
				}

				if (tableResponsive) {
					var tdDomRect = fixedTableData[0].getBoundingClientRect();
					var table = tableResponsive._node.firstElementChild;

					selectorAndEventListenerTupleArray.push(
						[
							tableResponsive._node,
							function(event) {
								var scrollLeft = event.target.scrollLeft;

								var translateXValue =  Math.ceil(scrollLeft - table.offsetLeft);
								console.log(translateXValue);

								var tdDomRectLeft = tdDomRect.left;

								for (let index = 0; index < fixedTableData.length; index++) {
									var element = fixedTableData[index];

									if ((translateXValue > 0) && (scrollLeft >= tdDomRectLeft)) {
										element.style.transform = 'translateX(' + translateXValue + 'px)';
									}
									else if (scrollLeft < tdDomRectLeft) {
										element.style.transform = '';
									}
								}
							}
						]
					);
				}

				selectorAndEventListenerTupleArray.forEach(
					function(selectorAndEventListenerTuple) {
						var selector = selectorAndEventListenerTuple[0];
						var event = selectorAndEventListenerTuple[1];

						selector.addEventListener('scroll', event);

						Liferay.on(
							'destroyPortlet',
							function() {
								selector.removeEventListener('scroll', event);
							}
						);
					}
				);
			}
		</c:if>

		searchContainer.updateDataStore(<%= primaryKeysJSONArray.toString() %>);

		var destroySearchContainer = function(event) {
			if (event.portletId === '<%= portletDisplay.getRootPortletId() %>') {
				searchContainer.destroy();

				Liferay.detach('destroyPortlet', destroySearchContainer);
			}
		};

		Liferay.on('destroyPortlet', destroySearchContainer);
	</aui:script>
</c:if>