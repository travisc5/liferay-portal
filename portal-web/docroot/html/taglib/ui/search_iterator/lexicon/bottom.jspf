<%--
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

		<c:if test="<%= paginate %>">
			<div class="taglib-search-iterator-page-iterator-bottom">
				<liferay-ui:search-paginator
					id='<%= id + "PageIteratorBottom" %>'
					markupView="<%= markupView %>"
					searchContainer="<%= searchContainer %>"
					type="<%= type %>"
				/>
			</div>
		</c:if>
	</div>
</div>

<c:if test="<%= Validator.isNotNull(id) %>">
	<input id="<%= namespace + id %>PrimaryKeys" name="<%= namespace + id %>PrimaryKeys" type="hidden" value="" />

	<%
	String modules = "liferay-search-container";
	String rowCheckerRowSelector = StringPool.BLANK;

	if (rowMover != null) {
		modules += ",liferay-search-container-move";
	}

	if (rowChecker != null) {
		modules += ",liferay-search-container-select";

		rowCheckerRowSelector = rowChecker.getRowSelector();

		if (Validator.isNull(rowCheckerRowSelector)) {
			rowCheckerRowSelector = "[data-selectable=\"true\"]";
		}
	}
	%>

	<aui:script use="<%= modules %>">
		var plugins = [];

		var rowSelector = '<%= rowHtmlTag %><%= rowCheckerRowSelector %>';

		<c:if test="<%= rowChecker != null %>">
			var rememberCheckBoxState = <%= rowChecker.isRememberCheckBoxState() %>;

			<c:if test="<%= rowChecker.isRememberCheckBoxState() && Validator.isNotNull(rowChecker.getRememberCheckBoxStateURLRegex()) %>">
				rememberCheckBoxState = '<%= rowChecker.getRememberCheckBoxStateURLRegex() %>';
			</c:if>

			plugins.push(
				{
					cfg: {
						keepSelection: rememberCheckBoxState,
						rowSelector: rowSelector
					},
					fn: A.Plugin.SearchContainerSelect
				}
			);
		</c:if>

		<c:if test="<%= rowMover != null %>">
			var rowMoverConfig = <%= rowMover.toJSON().toString() %>;

			rowMoverConfig.rowSelector = rowSelector + rowMoverConfig.rowSelector;

			plugins.push(
				{
					cfg: rowMoverConfig,
					fn: A.Plugin.SearchContainerMove
				}
			);
		</c:if>

		var searchContainer = new Liferay.SearchContainer(
			{
				id: '<%= namespace + id %>',
				plugins: plugins
			}
		).render();

		<c:if test="<%= fixedHeader && displayStyle.equals(SearchIteratorTag.DEFAULT_DISPLAY_STYLE) %>">
			var contentBox = searchContainer.get('contentBox');

			if (contentBox) {
				var tableElement;

				var fixedHeader = document.getElementById('<%= namespace + id %>fixedHeader');
				var mainContent = contentBox.ancestor('#main-content');
				var tableResponsive = contentBox.one('.table-responsive');

				var addAndRemoveEventListener = function(selector, eventType, event) {
					selector.addEventListener(eventType, event);

					Liferay.on(
					'destroyPortlet',
						function() {
							selector.removeEventListener(eventType, event);
						}
					);
				};

				var setElementTransformValue = function(element, translateX, translateY) {
					element.style.transform = 'translate(' + translateX + 'px, ' + translateY + 'px)';
				};

				var iterateElementsAndSetElementTransform = function(elementList, translateX, translateY) {
					for (var index = 0; index < elementList.length; index++) {
						setElementTransformValue(elementList[index], translateX, translateY);
					}
				};

				if (mainContent) {
					var scrollingContainer = window === Liferay.Util.getOpener() ? window : mainContent._node;
					var trDomRect = fixedHeader.previousElementSibling.getBoundingClientRect();

					tableElement = fixedHeader.parentElement.parentElement;

					addAndRemoveEventListener(
						scrollingContainer,
						'scroll',
						function(event) {
							var scrollTop = scrollingContainer.scrollTop;

							var trDomRecTop = trDomRect.top;

							setElementTransformValue(fixedHeader, 0, Math.ceil(scrollTop - tableElement.offsetTop - trDomRect.height));

							if (fixedHeader.classList.contains('hide') && (scrollTop >= trDomRecTop)) {
								fixedHeader.classList.remove('hide');
							}
							else if (scrollingContainer.scrollTop < trDomRecTop) {
								fixedHeader.classList.add('hide');
							}
						}
					);
				}

				if (tableResponsive) {
					var tableResponsiveNode = tableResponsive._node;

					var currentScrollLeft = tableResponsiveNode.scrollLeft;
					var horizontalScrollElements = document.querySelectorAll('.lfr-search-iterator-fixed-horizontal-scroll');
					var resetTransform = true;
					var tdDomRect = horizontalScrollElements[1].getBoundingClientRect();

					tableElement = tableResponsiveNode.firstElementChild;

					addAndRemoveEventListener(
						tableResponsiveNode,
						'scroll',
						function(event) {
							if (currentScrollLeft != event.target.scrollLeft) {
								var scrollLeft = event.target.scrollLeft;

								if (!Liferay.Util.isTablet()) {
									var translateXValue = Math.ceil(scrollLeft - tableElement.offsetLeft);

									var updateTransformValue = (translateXValue > 0) && (scrollLeft >= tdDomRect.left);

									iterateElementsAndSetElementTransform(
										horizontalScrollElements,
										updateTransformValue ? translateXValue : 0,
										0
									);

									resetTransform = true;
								}
								else if (Liferay.Util.isTablet() && resetTransform) {
									iterateElementsAndSetElementTransform(horizontalScrollElements, 0, 0);

									resetTransform = false;
								}

								currentScrollLeft = scrollLeft;
							}
						}
					);

					Liferay.Loader.require(
						'metal-debounce/src/debounce',
						function(main) {
							addAndRemoveEventListener(
								window,
								'resize',
								main.debounce(
									function() {
										if (Liferay.Util.isTablet()) {
											iterateElementsAndSetElementTransform(horizontalScrollElements, 0, 0);
										}
									},
									50
								)
							);
						}
					);
				}
			}
		</c:if>

		searchContainer.updateDataStore(<%= primaryKeysJSONArray.toString() %>);

		var destroySearchContainer = function(event) {
			if (event.portletId === '<%= portletDisplay.getRootPortletId() %>') {
				searchContainer.destroy();

				Liferay.detach('destroyPortlet', destroySearchContainer);
			}
		};

		Liferay.on('destroyPortlet', destroySearchContainer);
	</aui:script>
</c:if>