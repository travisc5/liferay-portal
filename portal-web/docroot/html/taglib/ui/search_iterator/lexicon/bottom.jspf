<%--
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

		<c:if test="<%= paginate %>">
			<div class="taglib-search-iterator-page-iterator-bottom">
				<liferay-ui:search-paginator
					id='<%= id + "PageIteratorBottom" %>'
					markupView="<%= markupView %>"
					searchContainer="<%= searchContainer %>"
					type="<%= type %>"
				/>
			</div>
		</c:if>
	</div>
</div>

<c:if test="<%= Validator.isNotNull(id) %>">
	<input id="<%= namespace + id %>PrimaryKeys" name="<%= namespace + id %>PrimaryKeys" type="hidden" value="" />

	<%
	String modules = "liferay-search-container";
	String rowCheckerRowSelector = StringPool.BLANK;

	if (rowMover != null) {
		modules += ",liferay-search-container-move";
	}

	if (rowChecker != null) {
		modules += ",liferay-search-container-select";

		rowCheckerRowSelector = rowChecker.getRowSelector();

		if (Validator.isNull(rowCheckerRowSelector)) {
			rowCheckerRowSelector = "[data-selectable=\"true\"]";
		}
	}
	%>

	<aui:script use="<%= modules %>">
		var plugins = [];

		var rowSelector = '<%= rowHtmlTag %><%= rowCheckerRowSelector %>';

		<c:if test="<%= rowChecker != null %>">
			var rememberCheckBoxState = <%= rowChecker.isRememberCheckBoxState() %>;

			<c:if test="<%= rowChecker.isRememberCheckBoxState() && Validator.isNotNull(rowChecker.getRememberCheckBoxStateURLRegex()) %>">
				rememberCheckBoxState = '<%= rowChecker.getRememberCheckBoxStateURLRegex() %>';
			</c:if>

			plugins.push(
				{
					cfg: {
						keepSelection: rememberCheckBoxState,
						rowSelector: rowSelector
					},
					fn: A.Plugin.SearchContainerSelect
				}
			);
		</c:if>

		<c:if test="<%= rowMover != null %>">
			var rowMoverConfig = <%= rowMover.toJSON().toString() %>;

			rowMoverConfig.rowSelector = rowSelector + rowMoverConfig.rowSelector;

			plugins.push(
				{
					cfg: rowMoverConfig,
					fn: A.Plugin.SearchContainerMove
				}
			);
		</c:if>

		var searchContainer = new Liferay.SearchContainer(
			{
				id: '<%= namespace + id %>',
				plugins: plugins
			}
		).render();

		<c:if test="<%= fixedHeader && displayStyle.equals(SearchIteratorTag.DEFAULT_DISPLAY_STYLE) %>">
			var searchContainerContentBox = searchContainer.get('contentBox');

			if (A.UA.ie) {
				var scrollingContainer = window;

				var loadedInFrame = scrollingContainer !== Liferay.Util.getOpener();

				if (loadedInFrame) {
					scrollingContainer = searchContainerContentBox.ancestor('#main-content');
				}

				var stickyClass = 'lfr-search-container-fixed-header';

				var stickyElement = searchContainerContentBox.one('thead')._node;

				var elementPosition = stickyElement.getBoundingClientRect();

				// Create a placeholder so that the DOM flow isn't affected with the element position changes to "fixed"

					var placeholder = document.createElement('thead');
					placeholder.style.width = elementPosition.width + 'px';
					placeholder.style.height = elementPosition.height + 'px';
					var placeHolderAdded = false;

				scrollingContainer.addEventListener(
					'scroll',
					function fixedHeaderScrollEvent() {
						console.log(scrollingContainer.scrollTop);
						if (scrollingContainer.scrollTop >= elementPosition.top && !placeHolderAdded) {
							stickyElement.classList.add(stickyClass);
							stickyElement.parentNode.insertBefore(placeholder, stickyElement);

							placeHolderAdded = true;
						} else if (scrollingContainer.scrollTop < elementPosition.top && placeHolderAdded) {
							stickyElement.classList.remove(stickyClass);
							stickyElement.parentNode.removeChild(placeholder);

							placeHolderAdded = false;
						}

						function removeFixedHeaderScrollEventListener() {
							scrollingContainer.removeEventListener('scroll', fixedHeaderScrollEvent);
						}

						Liferay.on('destroyPortlet', removeFixedHeaderScrollEventListener);
					}
				);
			} else {
				searchContainerContentBox.ancestor('.lfr-search-container-wrapper').addClass('lfr-search-container-fixed-header-container');
			}
		</c:if>

		searchContainer.updateDataStore(<%= primaryKeysJSONArray.toString() %>);

		var destroySearchContainer = function(event) {
			if (event.portletId === '<%= portletDisplay.getRootPortletId() %>') {
				searchContainer.destroy();

				Liferay.detach('destroyPortlet', destroySearchContainer);
			}
		};

		Liferay.on('destroyPortlet', destroySearchContainer);
	</aui:script>
</c:if>